"use client";

import { motion, AnimatePresence } from "motion/react";
import React from "react";
import { orderVariants } from "../config";
import { useOrders } from "../lib/use-orders";
import { OrderEntity } from "../../../2_entities/order/config/types";

export const Orders = () => {
  const { newOrders, completedOrders, isLoading, error, reconnect } =
    useOrders();

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("üéØ ===== ORDERS –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–ï–†–ï–†–ò–°–û–í–ö–ê =====");
  console.log("üìä –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):", newOrders.length);
  console.log("üìä –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):", completedOrders.length);
  console.log(
    "üìã ID –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
    newOrders.map((o) => o.id)
  );
  console.log(
    "üìã ID –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
    completedOrders.map((o) => o.id)
  );
  console.log("üéØ ===== –ö–û–ù–ï–¶ –ü–ï–†–ï–†–ò–°–û–í–ö–ò =====");

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
  const maxOrders = Math.max(newOrders.length, completedOrders.length);
  const getGridCols = () => {
    if (maxOrders > 20) return "grid-cols-3";
    if (maxOrders > 10) return "grid-cols-2";
    return "grid-cols-1";
  };

  if (isLoading) {
    return (
      <div className="col-span-2 flex items-center justify-center">
        <div className="text-center">
          <div className="text-2xl font-bold text-[#553826] mb-2">
            –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...
          </div>
          <div className="w-8 h-8 border-4 border-[#553826] border-t-transparent rounded-full animate-spin mx-auto"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="col-span-2 flex items-center justify-center">
        <div className="text-center">
          <div className="text-2xl font-bold text-red-600 mb-4">
            –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          </div>
          <div className="text-lg text-gray-600 mb-4">{error}</div>
          <button
            onClick={reconnect}
            className="px-6 py-2 bg-[#553826] text-white rounded-lg hover:bg-[#6b4a32] transition-colors"
          >
            –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="col-span-2 grid grid-cols-2">
      <div className="flex flex-col gap-5">
        <div className="bg-[#553826] py-8 text-center">
          <h1 className="text-5xl font-bold tracking-wide text-white">
            –í —Ä–∞–±–æ—Ç–µ
          </h1>
        </div>
        <div className={`grid ${getGridCols()} gap-5`}>
          <AnimatePresence mode="popLayout">
            {newOrders.map((order: OrderEntity) => (
              <motion.div
                key={order.id}
                variants={orderVariants}
                initial="initial"
                animate="animate"
                exit="exit"
                layout
                className="flex items-center justify-center"
              >
                <span className="text-5xl font-bold text-[#553826]">
                  {order.id}
                </span>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      </div>
      <div className="flex flex-col gap-5">
        <div className="bg-[#E51C4C] py-8 text-center">
          <h1 className="text-5xl font-bold tracking-wide text-white">
            –ì–æ—Ç–æ–≤—ã
          </h1>
        </div>
        <div className={`grid ${getGridCols()} gap-5`}>
          <AnimatePresence mode="popLayout">
            {completedOrders.map((order: OrderEntity) => (
              <motion.div
                key={order.id}
                variants={orderVariants}
                initial="initial"
                animate="animate"
                exit="exit"
                layout
                className="flex items-center justify-center"
              >
                <span className="text-5xl font-bold text-[#E51C4C]">
                  {order.id}
                </span>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
};
