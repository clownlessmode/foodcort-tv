import { io, Socket } from "socket.io-client";

export class OrdersWebSocketClient {
  private socket: Socket | null = null;
  private isConnected = false;
  private newOrderAudio: HTMLAudioElement | null = null;
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 10;
  private baseReconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

  // –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É)
  private readonly audioFormats = ["mp3", "wav", "aac", "aiff", "wma"];

  constructor(
    private serverUrl: string = process.env.NEXT_PUBLIC_API_URL || ""
  ) {}

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Derive origin and socket path from serverUrl
      let origin = this.serverUrl;
      let socketPath = "/socket.io";
      try {
        const parsed = new URL(this.serverUrl);
        origin = `${parsed.protocol}//${parsed.host}`;
        const basePath = parsed.pathname.replace(/\/$/, "");
        socketPath = `${basePath || ""}/socket.io` || "/socket.io";
      } catch (e) {
        console.warn(
          "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NEXT_PUBLIC_API_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å:",
          this.serverUrl,
          e
        );
      }

      const namespace = "/orders";
      const namespaceUrl = `${origin}${namespace}`;

      console.log("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket (origin):", origin);
      console.log("üîå Socket.IO path:", socketPath);
      console.log("üîå Namespace:", namespace);
      console.log("üîå –ü–æ–ª–Ω—ã–π URL –¥–ª—è namespace:", namespaceUrl);

      this.socket = io(namespaceUrl, {
        transports: ["websocket"],
        path: socketPath,
        timeout: 20000,
        forceNew: true,
        reconnection: true,
        reconnectionAttempts: Infinity, // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        reconnectionDelay: 1000,
        reconnectionDelayMax: 10000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10 —Å–µ–∫—É–Ω–¥
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
      if (typeof window !== "undefined") {
        this.initializeAudio();
      }

      this.socket.on("connect", () => {
        this.isConnected = true;
        this.reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞–∫–∞–∑–æ–≤");
        console.log("üîó Socket ID:", this.socket?.id);
        console.log("üîó Transport:", this.socket?.io.engine.transport.name);

        // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.startHeartbeat();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.socket?.emit("get_orders");
        console.log("üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...");

        resolve();
      });

      // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      this.socket.on("new_order", () => {
        this.playNewOrderSound();
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      this.socket.on("connection_confirmed", (data) => {
        console.log("üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      });

      this.socket.on("connect_error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
        const err = error as Error;
        console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:", err?.message || "–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è");
        if (error && typeof error === "object") {
          const maybe: Partial<{
            type: unknown;
            description: unknown;
            context: unknown;
          }> = error as never;
          if ("type" in maybe && maybe.type !== undefined) {
            console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", String(maybe.type));
          }
          if ("description" in maybe && maybe.description !== undefined) {
            console.error("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ:", String(maybe.description));
          }
          if ("context" in maybe && maybe.context !== undefined) {
            console.error("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç:", String(maybe.context));
          }
        }
        console.error("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        console.error("‚ùå URL (origin):", origin);
        console.error("‚ùå Socket.IO path:", socketPath);
        console.error("‚ùå Namespace URL:", namespaceUrl);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò =====");
        reject(error);
      });

      this.socket.on("disconnect", (reason) => {
        this.isConnected = false;
        this.stopHeartbeat();
        console.log("‚ùå ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï =====");
        console.log("‚ùå –ü—Ä–∏—á–∏–Ω–∞:", reason);
        console.log("‚ùå ===== –ö–û–ù–ï–¶ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø =====");

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä—É—á–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if (reason !== "io client disconnect") {
          this.scheduleReconnect();
        }
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ WebSocket
      this.socket.on("error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê WEBSOCKET =====");
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå –¢–∏–ø:", typeof error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò WEBSOCKET =====");
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      this.socket.io.on("error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê IO =====");
        console.error("‚ùå IO –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò IO =====");
      });

      this.socket.io.engine.on("error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê ENGINE =====");
        console.error("‚ùå Engine –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ENGINE =====");
      });
    });
  }

  disconnect(): void {
    this.stopHeartbeat();
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  private startHeartbeat(): void {
    this.stopHeartbeat(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π heartbeat –µ—Å–ª–∏ –µ—Å—Ç—å
    this.heartbeatInterval = setInterval(() => {
      if (this.socket && this.isConnected) {
        console.log("üíì –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat...");
        this.socket.emit("ping");
      }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  private stopHeartbeat(): void {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  private scheduleReconnect(): void {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.log(
        "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
      );
      return;
    }

    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
    const delay = Math.min(
      this.baseReconnectDelay * Math.pow(2, this.reconnectAttempts) +
        Math.random() * 1000,
      30000 // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
    );

    this.reconnectAttempts++;
    console.log(
      `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${
        this.maxReconnectAttempts
      } —á–µ—Ä–µ–∑ ${Math.round(delay)}–º—Å`
    );

    this.reconnectTimeout = setTimeout(() => {
      console.log("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
      this.connect().catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:", error);
        this.scheduleReconnect(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
      });
    }, delay);
  }

  private async initializeAudio(): Promise<void> {
    const base = (process.env.NEXT_PUBLIC_BASE_PATH || "").replace(/\/$/, "");

    for (const format of this.audioFormats) {
      try {
        const audioPath = `${base}/sounds/neworder.${format}`;
        console.log(`üîä –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ: ${audioPath}`);

        const audio = new Audio(audioPath);
        audio.preload = "auto";
        audio.volume = 1.0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç
        const canPlay = await this.canPlayAudio(audio);

        if (canPlay) {
          this.newOrderAudio = audio;
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç: ${format}`);
          return;
        } else {
          console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: ${format}`);
        }
      } catch (e) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞ ${format}:`, e);
      }
    }

    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç");
  }

  private canPlayAudio(audio: HTMLAudioElement): Promise<boolean> {
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        resolve(false);
      }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

      const handleCanPlay = () => {
        clearTimeout(timeout);
        audio.removeEventListener("canplay", handleCanPlay);
        audio.removeEventListener("error", handleError);
        resolve(true);
      };

      const handleError = () => {
        clearTimeout(timeout);
        audio.removeEventListener("canplay", handleCanPlay);
        audio.removeEventListener("error", handleError);
        resolve(false);
      };

      audio.addEventListener("canplay", handleCanPlay);
      audio.addEventListener("error", handleError);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      audio.load();
    });
  }

  private playNewOrderSound(): void {
    if (this.newOrderAudio) {
      try {
        this.newOrderAudio.currentTime = 0;
        void this.newOrderAudio.play();
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:", e);
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ
        this.initializeAudio().catch((error) => {
          console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ:", error);
        });
      }
    } else {
      console.warn("‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...");
      this.initializeAudio().catch((error) => {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ:", error);
      });
    }
  }

  onNewOrder(callback: (order: unknown) => void): void {
    if (this.socket) {
      this.socket.on("new_order", callback);
    }
  }

  onOrderStatusUpdate(
    callback: (data: {
      orderId: number;
      status: string;
      updatedBy: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("order_status_updated", callback);
    }
  }

  onOrdersList(callback: (orders: unknown[]) => void): void {
    if (this.socket) {
      this.socket.on("orders_list", callback);
    }
  }

  onConnectionConfirmed(
    callback: (data: {
      message: string;
      clientId: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("connection_confirmed", callback);
    }
  }

  get connected(): boolean {
    return this.isConnected;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  forceReconnect(): void {
    console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    this.disconnect();
    this.reconnectAttempts = 0;
    this.connect().catch((error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:", error);
      this.scheduleReconnect();
    });
  }
}
