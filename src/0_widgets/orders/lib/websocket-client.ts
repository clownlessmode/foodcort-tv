import { io, Socket } from "socket.io-client";

export class OrdersWebSocketClient {
  private socket: Socket | null = null;
  private isConnected = false;
  private newOrderAudio: HTMLAudioElement | null = null;

  constructor(
    private serverUrl: string = process.env.NEXT_PUBLIC_API_URL || ""
  ) {}

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Derive origin and socket path from serverUrl
      let origin = this.serverUrl;
      let socketPath = "/socket.io";
      try {
        const parsed = new URL(this.serverUrl);
        origin = `${parsed.protocol}//${parsed.host}`;
        const basePath = parsed.pathname.replace(/\/$/, "");
        socketPath = `${basePath || ""}/socket.io` || "/socket.io";
      } catch (e) {
        console.warn(
          "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NEXT_PUBLIC_API_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å:",
          this.serverUrl,
          e
        );
      }

      const namespace = "/orders";
      const namespaceUrl = `${origin}${namespace}`;

      console.log("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket (origin):", origin);
      console.log("üîå Socket.IO path:", socketPath);
      console.log("üîå Namespace:", namespace);
      console.log("üîå –ü–æ–ª–Ω—ã–π URL –¥–ª—è namespace:", namespaceUrl);

      this.socket = io(namespaceUrl, {
        transports: ["websocket"],
        path: socketPath,
        timeout: 20000,
        forceNew: true,
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000,
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
      if (typeof window !== "undefined") {
        try {
          const base = (process.env.NEXT_PUBLIC_BASE_PATH || "").replace(
            /\/$/,
            ""
          );
          const audioPath =
            `${base}/sounds/neworder.mp3` || "/sounds/neworder.mp3";
          this.newOrderAudio = new Audio(audioPath);
          this.newOrderAudio.preload = "auto";
          this.newOrderAudio.volume = 1.0;
        } catch (e) {
          console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:", e);
        }
      }

      this.socket.on("connect", () => {
        this.isConnected = true;
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞–∫–∞–∑–æ–≤");
        console.log("üîó Socket ID:", this.socket?.id);
        console.log("üîó Transport:", this.socket?.io.engine.transport.name);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.socket?.emit("get_orders");
        console.log("üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...");

        resolve();
      });

      // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      this.socket.on("new_order", () => {
        if (this.newOrderAudio) {
          try {
            this.newOrderAudio.currentTime = 0;
            void this.newOrderAudio.play();
          } catch (e) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:", e);
          }
        }
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      this.socket.on("connection_confirmed", (data) => {
        console.log("üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      });

      this.socket.on("connect_error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
        const err = error as Error;
        console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:", err?.message || "–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è");
        if (error && typeof error === "object") {
          const maybe: Partial<{
            type: unknown;
            description: unknown;
            context: unknown;
          }> = error as never;
          if ("type" in maybe && maybe.type !== undefined) {
            console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", String(maybe.type));
          }
          if ("description" in maybe && maybe.description !== undefined) {
            console.error("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ:", String(maybe.description));
          }
          if ("context" in maybe && maybe.context !== undefined) {
            console.error("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç:", String(maybe.context));
          }
        }
        console.error("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        console.error("‚ùå URL (origin):", origin);
        console.error("‚ùå Socket.IO path:", socketPath);
        console.error("‚ùå Namespace URL:", namespaceUrl);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò =====");
        reject(error);
      });

      this.socket.on("disconnect", (reason) => {
        this.isConnected = false;
        console.log("‚ùå ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï =====");
        console.log("‚ùå –ü—Ä–∏—á–∏–Ω–∞:", reason);
        console.log("‚ùå ===== –ö–û–ù–ï–¶ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ WebSocket
      this.socket.on("error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê WEBSOCKET =====");
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå –¢–∏–ø:", typeof error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò WEBSOCKET =====");
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      this.socket.io.on("error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê IO =====");
        console.error("‚ùå IO –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò IO =====");
      });

      this.socket.io.engine.on("error", (error: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê ENGINE =====");
        console.error("‚ùå Engine –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ENGINE =====");
      });
    });
  }

  disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  onNewOrder(callback: (order: unknown) => void): void {
    if (this.socket) {
      this.socket.on("new_order", callback);
    }
  }

  onOrderStatusUpdate(
    callback: (data: {
      orderId: number;
      status: string;
      updatedBy: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("order_status_updated", callback);
    }
  }

  onOrdersList(callback: (orders: unknown[]) => void): void {
    if (this.socket) {
      this.socket.on("orders_list", callback);
    }
  }

  onConnectionConfirmed(
    callback: (data: {
      message: string;
      clientId: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("connection_confirmed", callback);
    }
  }

  get connected(): boolean {
    return this.isConnected;
  }
}
