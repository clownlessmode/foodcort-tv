/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { OrdersWebSocketClient } from "./websocket-client";
import {
  OrderEntity,
  ORDERS_STATUS,
} from "../../../2_entities/order/config/types";

// –£—Ç–∏–ª–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
function isToday(date: Date): boolean {
  const now = new Date();
  return (
    date.getFullYear() === now.getFullYear() &&
    date.getMonth() === now.getMonth() &&
    date.getDate() === now.getDate()
  );
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
interface ServerOrderData {
  orderId?: number;
  id?: number;
  status?: string;
  phoneNumber?: string;
  phone_number?: string;
  idStore?: number;
  id_store?: number;
  created_at?: string;
  completed_at?: string | null;
  handed_over_at?: string | null;
  products?: unknown[];
  message?: string;
}

interface UseOrdersReturn {
  newOrders: OrderEntity[];
  completedOrders: OrderEntity[];
  isLoading: boolean;
  error: string | null;
  reconnect: () => void;
}

export const useOrders = (): UseOrdersReturn => {
  const [newOrders, setNewOrders] = useState<OrderEntity[]>([]);
  const [completedOrders, setCompletedOrders] = useState<OrderEntity[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const wsClientRef = useRef<OrdersWebSocketClient | null>(null);
  const createdAtRef = useRef<Map<number, Date>>(new Map());

  const connect = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);

      const client = new OrdersWebSocketClient();
      await client.connect();

      wsClientRef.current = client;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      client.onConnectionConfirmed((data) => {
        console.log("üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", data);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
      client.onOrdersList((ordersData: unknown[]) => {
        console.log("üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ):", ordersData);
        console.log("üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:", ordersData.length);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç OrderEntity
        const orders: OrderEntity[] = ordersData.map((orderData: unknown) => {
          const data = orderData as ServerOrderData;
          return {
            id: data.orderId || data.id || 0,
            orderId: data.orderId || data.id || 0,
            status: (data.status as ORDERS_STATUS) || ORDERS_STATUS.NEW,
            phone_number: data.phoneNumber || data.phone_number || "",
            id_store: data.idStore || data.id_store || 0,
            created_at: data.created_at
              ? new Date(data.created_at)
              : new Date(),
            completed_at: data.completed_at
              ? new Date(data.completed_at)
              : null,
            handed_over_at: data.handed_over_at
              ? new Date(data.handed_over_at)
              : null,
          };
        });

        console.log("üìã –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", orders);

        // –ó–∞–ø–æ–º–Ω–∏–º created_at –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        for (const o of orders) {
          createdAtRef.current.set(Number(o.id), o.created_at);
        }

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const todayOrders = orders.filter((o) => isToday(o.created_at));

        const newOrdersList = todayOrders
          .filter((order) => order.status === ORDERS_STATUS.NEW)
          .sort((a, b) => a.id - b.id); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ID (–º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞ –≤–≤–µ—Ä—Ö—É)
        const completedOrdersList = todayOrders
          .filter((order) => order.status === ORDERS_STATUS.COMPLETED)
          .sort((a, b) => a.id - b.id); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ID (–º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞ –≤–≤–µ—Ä—Ö—É)

        console.log("üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:", newOrdersList);
        console.log("üìã –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:", completedOrdersList);

        setNewOrders(newOrdersList);
        setCompletedOrders(completedOrdersList);

        console.log(
          "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã - –Ω–æ–≤—ã–µ:",
          newOrdersList.length,
          "–≥–æ—Ç–æ–≤—ã–µ:",
          completedOrdersList.length
        );
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      client.onNewOrder((orderData: unknown) => {
        const data = orderData as ServerOrderData;
        console.log("üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ):", data);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç OrderEntity
        const createdAt = data.created_at
          ? new Date(data.created_at)
          : new Date();
        const order: OrderEntity = {
          id: data.orderId || data.id || 0,
          orderId: data.orderId || data.id || 0,
          status: (data.status as ORDERS_STATUS) || ORDERS_STATUS.NEW,
          phone_number: data.phoneNumber || data.phone_number || "",
          id_store: data.idStore || data.id_store || 0,
          created_at: createdAt,
          completed_at: null,
          handed_over_at: null,
        };

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        if (!isToday(order.created_at)) {
          console.log("‚è≠Ô∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", order.id);
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω–∏–º created_at
        createdAtRef.current.set(Number(order.id), order.created_at);

        console.log("üÜï –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑:", order);
        console.log("üÜï –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", order.status);
        console.log("üÜï ID –∑–∞–∫–∞–∑–∞:", order.id);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        setNewOrders((prev) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–ø–∏—Å–∫–µ
          const existingOrder = prev.find(
            (existingOrder) => Number(existingOrder.id) === Number(order.id)
          );
          if (!existingOrder) {
            console.log("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫:", order.id);
            const updatedOrders = [...prev, order];
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ID (–º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞ –≤–≤–µ—Ä—Ö—É)
            return updatedOrders.sort((a, b) => a.id - b.id);
          }
          console.log("‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ:", order.id);
          return prev;
        });
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
      client.onOrderStatusUpdate((data) => {
        console.log("üîÑ ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê =====");
        console.log("üìã –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", data);
        console.log("üéØ –ó–∞–∫–∞–∑ ID:", data.orderId);
        console.log("üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", data.status);

        const knownCreatedAt = createdAtRef.current.get(Number(data.orderId));
        const isOrderToday = knownCreatedAt ? isToday(knownCreatedAt) : false;

        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
        if (data.status === ORDERS_STATUS.COMPLETED) {
          console.log("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å COMPLETED");

          // –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
          setNewOrders((prevNewOrders) => {
            console.log(
              "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:",
              prevNewOrders.map((o) => o.id)
            );
            const foundInNew = prevNewOrders.find(
              (order) => Number(order.id) === Number(data.orderId)
            );
            if (foundInNew) {
              console.log("‚úÖ –ù–ê–ô–î–ï–ù –∑–∞–∫–∞–∑ –≤ –Ω–æ–≤—ã—Ö, –£–î–ê–õ–Ø–ï–ú:", data.orderId);
              const newList = prevNewOrders.filter(
                (order) => Number(order.id) !== Number(data.orderId)
              );
              console.log(
                "üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                newList.map((o) => o.id)
              );
              return newList;
            } else {
              console.log("‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–ê–ô–î–ï–ù –≤ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
            }
            return prevNewOrders;
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          setCompletedOrders((prevCompletedOrders) => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é
            if (!isOrderToday) {
              console.log(
                "‚è≠Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –≤ –≥–æ—Ç–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º:",
                data.orderId
              );
              return prevCompletedOrders;
            }
            console.log(
              "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:",
              prevCompletedOrders.map((o) => o.id)
            );
            const foundInCompleted = prevCompletedOrders.find(
              (order) => Number(order.id) === Number(data.orderId)
            );
            if (!foundInCompleted) {
              console.log(
                "‚úÖ –ó–∞–∫–∞–∑ –ù–ï –ù–ê–ô–î–ï–ù –≤ –≥–æ—Ç–æ–≤—ã—Ö, –î–û–ë–ê–í–õ–Ø–ï–ú:",
                data.orderId
              );
              const tempOrder: OrderEntity = {
                id: data.orderId,
                orderId: data.orderId,
                status: ORDERS_STATUS.COMPLETED,
                phone_number: "",
                id_store: 0,
                created_at: knownCreatedAt || new Date(),
                completed_at: new Date(),
                handed_over_at: null,
              };
              const newList = [...prevCompletedOrders, tempOrder].sort(
                (a, b) => a.id - b.id
              );
              console.log(
                "üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                newList.map((o) => o.id)
              );
              return newList;
            } else {
              console.log("‚ùå –ó–∞–∫–∞–∑ –£–ñ–ï –ï–°–¢–¨ –≤ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
            }
            return prevCompletedOrders;
          });
        } else if (data.status === ORDERS_STATUS.NEW) {
          console.log("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å NEW");

          // –£–¥–∞–ª—è–µ–º –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
          setCompletedOrders((prevCompletedOrders) => {
            console.log(
              "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:",
              prevCompletedOrders.map((o) => o.id)
            );
            const foundInCompleted = prevCompletedOrders.find(
              (order) => Number(order.id) === Number(data.orderId)
            );
            if (foundInCompleted) {
              console.log("‚úÖ –ù–ê–ô–î–ï–ù –∑–∞–∫–∞–∑ –≤ –≥–æ—Ç–æ–≤—ã—Ö, –£–î–ê–õ–Ø–ï–ú:", data.orderId);
              const newList = prevCompletedOrders.filter(
                (order) => Number(order.id) !== Number(data.orderId)
              );
              console.log(
                "üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                newList.map((o) => o.id)
              );
              return newList;
            } else {
              console.log("‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–ê–ô–î–ï–ù –≤ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
            }
            return prevCompletedOrders;
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          setNewOrders((prevNewOrders) => {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é
            if (!isOrderToday) {
              console.log(
                "‚è≠Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –≤ –Ω–æ–≤—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º:",
                data.orderId
              );
              return prevNewOrders;
            }
            console.log(
              "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:",
              prevNewOrders.map((o) => o.id)
            );
            const foundInNew = prevNewOrders.find(
              (order) => Number(order.id) === Number(data.orderId)
            );
            if (!foundInNew) {
              console.log(
                "‚úÖ –ó–∞–∫–∞–∑ –ù–ï –ù–ê–ô–î–ï–ù –≤ –Ω–æ–≤—ã—Ö, –î–û–ë–ê–í–õ–Ø–ï–ú:",
                data.orderId
              );
              const tempOrder: OrderEntity = {
                id: data.orderId,
                orderId: data.orderId,
                status: ORDERS_STATUS.NEW,
                phone_number: "",
                id_store: 0,
                created_at: knownCreatedAt || new Date(),
                completed_at: null,
                handed_over_at: null,
              };
              const newList = [...prevNewOrders, tempOrder].sort(
                (a, b) => a.id - b.id
              );
              console.log(
                "üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                newList.map((o) => o.id)
              );
              return newList;
            } else {
              console.log("‚ùå –ó–∞–∫–∞–∑ –£–ñ–ï –ï–°–¢–¨ –≤ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
            }
            return prevNewOrders;
          });
        } else if (
          data.status === ORDERS_STATUS.CANCELLED ||
          data.status === ORDERS_STATUS.DELIVERED
        ) {
          const statusText =
            data.status === ORDERS_STATUS.CANCELLED ? "–æ—Ç–º–µ–Ω–µ–Ω" : "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω";
          console.log(
            `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å ${data.status.toUpperCase()} - —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ (${statusText})`
          );

          // –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
          setNewOrders((prevNewOrders) => {
            console.log(
              "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:",
              prevNewOrders.map((o) => o.id)
            );
            const foundInNew = prevNewOrders.find(
              (order) => Number(order.id) === Number(data.orderId)
            );
            if (foundInNew) {
              console.log(
                `‚úÖ –ù–ê–ô–î–ï–ù –∑–∞–∫–∞–∑ –≤ –Ω–æ–≤—ã—Ö, –£–î–ê–õ–Ø–ï–ú (${statusText}):`,
                data.orderId
              );
              const newList = prevNewOrders.filter(
                (order) => Number(order.id) !== Number(data.orderId)
              );
              console.log(
                "üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                newList.map((o) => o.id)
              );
              return newList;
            } else {
              console.log("‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–ê–ô–î–ï–ù –≤ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
            }
            return prevNewOrders;
          });

          // –£–¥–∞–ª—è–µ–º –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
          setCompletedOrders((prevCompletedOrders) => {
            console.log(
              "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:",
              prevCompletedOrders.map((o) => o.id)
            );
            const foundInCompleted = prevCompletedOrders.find(
              (order) => Number(order.id) === Number(data.orderId)
            );
            if (foundInCompleted) {
              console.log(
                `‚úÖ –ù–ê–ô–î–ï–ù –∑–∞–∫–∞–∑ –≤ –≥–æ—Ç–æ–≤—ã—Ö, –£–î–ê–õ–Ø–ï–ú (${statusText}):`,
                data.orderId
              );
              const newList = prevCompletedOrders.filter(
                (order) => Number(order.id) !== Number(data.orderId)
              );
              console.log(
                "üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:",
                newList.map((o) => o.id)
              );
              return newList;
            } else {
              console.log("‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–ê–ô–î–ï–ù –≤ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
            }
            return prevCompletedOrders;
          });
        }

        console.log("üîÑ ===== –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê =====");
      });

      setIsLoading(false);
    } catch (err) {
      console.error("‚ùå ===== –û–®–ò–ë–ö–ê –í USE-ORDERS =====");
      console.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:", typeof err);
      console.error("‚ùå –û—à–∏–±–∫–∞:", err);

      if (err instanceof Error) {
        console.error("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:", err.name);
        console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:", err.message);
        console.error("‚ùå –°—Ç–µ–∫:", err.stack);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π Socket.IO
      if (err && typeof err === "object" && "type" in err) {
        console.error("‚ùå Socket.IO —Ç–∏–ø –æ—à–∏–±–∫–∏:", (err as any).type);
        console.error("‚ùå Socket.IO –æ–ø–∏—Å–∞–Ω–∏–µ:", (err as any).description);
      }

      console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò –í USE-ORDERS =====");

      setError(
        err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
      );
      setIsLoading(false);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setNewOrders([]);
      setCompletedOrders([]);
    }
  }, []);

  const reconnect = useCallback(() => {
    if (wsClientRef.current) {
      wsClientRef.current.disconnect();
    }
    connect();
  }, [connect]);

  useEffect(() => {
    connect();

    return () => {
      if (wsClientRef.current) {
        wsClientRef.current.disconnect();
      }
    };
  }, [connect]);

  return {
    newOrders,
    completedOrders,
    isLoading,
    error,
    reconnect,
  };
};
